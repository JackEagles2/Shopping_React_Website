{"ast":null,"code":"var _jsxFileName = \"/home/eagles/git/shopping/src/components/ProductDialog.tsx\";\nimport React from 'react';\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductDialog = ({\n  product,\n  isOpen,\n  onClose,\n  setBasket\n}) => {\n  const add = () => {\n    if (!prevBasket) {\n      // If basket is null or undefined, initialize it with the product and count 1\n      return [{\n        product,\n        count: 1\n      }];\n    } else {\n      // Check if the product is already in the basket\n      const existingItemIndex = prevBasket.findIndex(item => item.product.id === productToAdd.id);\n      if (existingItemIndex !== -1) {\n        // If product exists, update its count by creating a new array with updated count\n        const updatedBasket = [...prevBasket];\n        updatedBasket[existingItemIndex].count++;\n        return updatedBasket;\n      } else {\n        // If product does not exist, add it to the basket with count 1\n        return [...prevBasket, {\n          product: productToAdd,\n          count: 1\n        }];\n      }\n    }\n  };\n  if (!product) return null;\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: isOpen,\n    onClose: onClose,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: product.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      dividers: true,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        className: \"mini-image-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: product.image,\n          alt: product.name,\n          className: \"mini-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        gutterBottom: true,\n        children: product.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: add,\n        children: \"Add to Basket\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        color: \"primary\",\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_c = ProductDialog;\nexport default ProductDialog;\nvar _c;\n$RefreshReg$(_c, \"ProductDialog\");","map":{"version":3,"names":["React","Dialog","DialogTitle","DialogContent","DialogActions","Button","Typography","jsxDEV","_jsxDEV","ProductDialog","product","isOpen","onClose","setBasket","add","prevBasket","count","existingItemIndex","findIndex","item","id","productToAdd","updatedBasket","open","children","name","fileName","_jsxFileName","lineNumber","columnNumber","dividers","className","src","image","alt","gutterBottom","description","onClick","color","_c","$RefreshReg$"],"sources":["/home/eagles/git/shopping/src/components/ProductDialog.tsx"],"sourcesContent":["import React from 'react';\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button, Typography } from '@mui/material';\nimport { Product } from '../data';\nimport classes from \"*.module.css\";\n\ninterface ProductDialogProps {\n    product: Product | null;\n    isOpen: boolean;\n    onClose: () => void;\n    setBasket: React.Dispatch<React.SetStateAction<Product[] | null>>;\n}\n\nconst ProductDialog: React.FC<ProductDialogProps> = ({ product, isOpen, onClose, setBasket }) => {\n    const add = () => {\n        if (!prevBasket) {\n            // If basket is null or undefined, initialize it with the product and count 1\n            return [{ product, count: 1 }];\n        } else {\n            // Check if the product is already in the basket\n            const existingItemIndex = prevBasket.findIndex(item => item.product.id === productToAdd.id);\n\n            if (existingItemIndex !== -1) {\n                // If product exists, update its count by creating a new array with updated count\n                const updatedBasket = [...prevBasket];\n                updatedBasket[existingItemIndex].count++;\n                return updatedBasket;\n            } else {\n                // If product does not exist, add it to the basket with count 1\n                return [...prevBasket, { product: productToAdd, count: 1 }];\n            }\n        }\n    };\n    if (!product) return null\n    return (\n        <Dialog open={isOpen} onClose={onClose}>\n            <DialogTitle>{product.name}</DialogTitle>\n            <DialogContent dividers>\n                <Typography className='mini-image-container'>\n                    <img src={product.image} alt={product.name} className=\"mini-image\" />\n                </Typography>\n                <Typography gutterBottom>\n                    {product.description}\n                </Typography>\n\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={add}>\n                    Add to Basket\n                </Button>\n\n                <Button onClick={onClose} color=\"primary\">\n                    Back\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default ProductDialog;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}